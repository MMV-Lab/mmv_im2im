
# everything about data
data:
  category: "unpair"
  # data_path: "/mnt/data/xyz.csv"
  data_path: "/mnt/eternus/sample_data/im2im/cyclegan_2d/train"
  # data_path:
  #   source_path:
  #   target_path:
  #   costmap_path: optional
  #   image_type: "tiff"
  dataloader:
    train_val_ratio: 0.1
    train:
      dataloader_type:
        module_name: monai.data
        func_name: PersistentDataset
      dataset_params: 
        cache_dir: "./tmp"
      dataloader_params:
        batch_size: 1
        pin_memory: True
        num_workers: 4
      partial_loader:
        load_percentage: 0.5
    val:
      dataloader_type:
        module_name: monai.data
        func_name: PersistentDataset
      dataset_params: 
        cache_dir: "./tmp"
      dataloader_params:
        batch_size: 1
        pin_memory: True
        num_workers: 4

  preprocess:
    - module_name: monai.transforms
      func_name: LoadImaged
      params:
        keys: ["IM", "GT"]
        dimension_order_out: "YX"
        C: 0
        T: 0
        Z: 0
    - module_name: monai.transforms
      func_name: AddChanneld
      params:
        keys: ["IM", "GT"]
    - module_name: monai.transforms
      func_name: ScaleIntensityRangePercentilesd
      params:
        keys: ["IM"]
        lower: 0.05
        upper: 99.5
        b_min: -1
        b_max: 1
    - module_name: monai.transforms
      func_name: RandSpatialCropSamplesd
      params:
        keys: ["IM", "GT"]
        random_size: False
        num_samples: 4
        roi_size: [256, 256]
    - module_name: monai.transforms
      func_name: EnsureTyped
      params:
        keys: ["IM", "GT"]
  augmentation:
    - module_name: monai.transforms
      func_name: RandFlipd
      params:
        prob: 0.5
        keys: ["IM", "GT"]

# model
model:
  category: cyclegan
  generator:
    type: predefined_resnet
    params:
      spatial_dims: 2
      in_channels: 1
      out_channels: 1
      n_down_blocks: 4
      n_res_blocks: 9
      nf: 64
      norm_layer: "BATCH"
  discriminator:
    type: predefined_basic
    params:
      spatial_dims: 2
      in_channels: 1
      n_layers: 4
      nf: 64
      norm_layer: "INSTANCE"
  criterion:
    gan_loss:
      module_name: torch.nn
      func_name: MSELoss
      params:
        reduction: 'mean'
    cycle_loss:
      module_name: torch.nn
      func_name: L1Loss
      params:
        reduction: 'mean'
    identity_loss:
      module_name: torch.nn
      func_name: L1Loss
      params:
        reduction: 'mean'
    weights:
      gan_loss: 1
      cycle_loss: 10
      identity_loss: 2
    fake_pool_size: 50
  optimizer:
    generator:
      module_name: torch.optim
      func_name: Adam  # AdamW
      params:
        lr: 0.001
        weight_decay: 0.0005
    discriminator:
      module_name: torch.optim
      func_name: Adam  # AdamW
      params:
        lr: 0.001
        weight_decay: 0.0005
  scheduler:
    generator:
      module_name: torch.optim.lr_scheduler
      func_name: ExponentialLR
      params:
        gamma: 0.98
    discriminator:
      module_name: torch.optim.lr_scheduler
      func_name: ExponentialLR
      params:
        gamma: 0.98
# training
training:
  params:
    gpus: 1
    precision: 16
    # stochastic_weight_avg: True  # only work with 1 optimizer
#  callbacks:
#    - module_name: pytorch_lightning.callbacks.early_stopping
#      func_name: EarlyStopping
#      params:
#        monitor: 'val_loss'
    