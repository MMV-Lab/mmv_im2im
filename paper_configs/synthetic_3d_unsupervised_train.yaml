mode: train

data:
  category: "pair"
  data_path: /mnt/eternus/users/Jianxu/projects/im2im_experiments_v1/data/synthetic3D/HIST1H2BJ/train
  dataloader:
    train:
      dataloader_params:
        batch_size: 2
        pin_memory: True
        num_workers: 4

  preprocess:
    - module_name: monai.transforms
      func_name: LoadImaged
      params:
        keys: ["IM", "GT"]
        dimension_order_out: "ZYX"
        T: 0
        C: 0
    - module_name: monai.transforms
      func_name: AddChanneld
      params:
        keys: ["IM", "GT"]          
    - module_name: monai.transforms
      func_name: ScaleIntensityRangePercentilesd
      params:
        keys: ["GT"]
        lower: 0.1
        upper: 99.9
        b_min: -1
        b_max: 1    
    - module_name: monai.transforms
      func_name: ScaleIntensityRangePercentilesd
      params:
        keys: ["IM"]
        lower: 0
        upper: 100
        b_min: -1
        b_max: 1    
    - module_name: monai.transforms
      func_name: RandSpatialCropd
      params:
        keys: ["IM"]
        random_size: False
        roi_size: [32, 192, 192] #[42, 192, 192]
    # no need to crop at the same location due to different sizes
    - module_name: monai.transforms
      func_name: RandSpatialCropd
      params:
        keys: ["GT"]
        random_size: False
        roi_size: [32, 192, 192] #[42, 192, 192]
    - module_name: monai.transforms
      func_name: EnsureTyped
      params:
        keys: ["IM", "GT"]
  augmentation:
    - module_name: monai.transforms
      func_name: RandFlipd
      params:
        prob: 0.5
        keys: ["IM", "GT"]

model:
  framework: cyclegan
  net:
    generator:
      module_name: aicsmlsegment.NetworkArchitecture.unet_xy_zoom_0pad_single  
      func_name: UNet3D
      params:
        in_channel: 1
        n_classes: 1
        down_ratio: 3
    discriminator:
      type: predefined_basic
      params:
        spatial_dims: 3
        in_channels: 1
        n_layers: 4
        nf: 64
        norm_layer: "INSTANCE"
  criterion:
    gan_loss:
      module_name: torch.nn
      func_name: MSELoss
      params:
        reduction: 'mean'
    cycle_loss:
      module_name: torch.nn
      func_name: L1Loss
      params:
        reduction: 'mean'
    identity_loss:
      module_name: torch.nn
      func_name: L1Loss
      params:
        reduction: 'mean'
    weights:
      gan_loss: 1
      cycle_loss: 10
      identity_loss: 2
    fake_pool_size: 30
  optimizer:
    generator:
      module_name: torch.optim
      func_name: Adam  # AdamW
      params:
        lr: 0.0001
        betas: [0.5, 0.999]
        weight_decay: 0.0005
    discriminator:
      module_name: torch.optim
      func_name: Adam  # AdamW
      params:
        lr: 0.0001
        betas: [0.5, 0.999]
        weight_decay: 0.0005
  scheduler:
    generator:
      module_name: torch.optim.lr_scheduler
      func_name: ExponentialLR
      params:
        gamma: 0.99
    discriminator:
      module_name: torch.optim.lr_scheduler
      func_name: ExponentialLR
      params:
        gamma: 0.99
trainer:
  verbose: True
  params:
    accelerator: "gpu"
    devices: 1
    precision: 16
    max_epochs: 10000
    detect_anomaly: True
  callbacks:
    - module_name: lightning.pytorch.callbacks.model_checkpoint
      func_name: ModelCheckpoint
      params:
        save_last: True
        save_weights_only: True 
