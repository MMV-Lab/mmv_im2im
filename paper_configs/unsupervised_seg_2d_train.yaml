mode: train

data:
  data_path: ./data/unsupervise2D/train   #ADD-YOURS
  category: "unpair"
  dataloader:
    train:
      dataloader_params:
        batch_size: 2
        pin_memory: True
        num_workers: 4

  preprocess:
    - module_name: monai.transforms
      func_name: LoadImaged
      params:
        keys: ["IM", "GT"]
        dimension_order_out: "YX"
        C: 0
        T: 0
        Z: 0
    - module_name: monai.transforms
      func_name: AddChanneld
      params:
        keys: ["IM", "GT"]
    - module_name: monai.transforms
      func_name: ScaleIntensityRangePercentilesd
      params:
        keys: ["GT"]
        lower: 0
        upper: 100
        b_min: -1
        b_max: 1
    - module_name: monai.transforms
      func_name: ScaleIntensityRangePercentilesd
      params:
        keys: ["IM"]
        lower: 0.1
        upper: 99.9
        b_min: -1
        b_max: 1
    #- module_name: monai.transforms
    #  func_name: NormalizeIntensityd
    #  params:
    #    keys: ["IM"]
    - module_name: monai.transforms
      func_name: RandSpatialCropd
      params:
        keys: ["IM"]
        random_size: False
        roi_size: [512, 512]
    # no need to crop at the same location due to different sizes
    - module_name: monai.transforms
      func_name: RandSpatialCropd
      params:
        keys: ["GT"]
        random_size: False
        roi_size: [512, 512]
    - module_name: monai.transforms
      func_name: EnsureTyped
      params:
        keys: ["IM", "GT"]

model:
  framework: cyclegan
  net:
    generator:
      module_name: monai.networks.nets  
      func_name: AttentionUnet
      params:
        spatial_dims: 2
        in_channels: 1
        out_channels: 1
        channels: [32, 64, 128, 512]
        strides: [2, 2, 2]
    discriminator:
      type: predefined_basic
      params:
        spatial_dims: 2
        in_channels: 1
        n_layers: 4
        nf: 64
        norm_layer: "INSTANCE"
  criterion:
    gan_loss:
      module_name: torch.nn
      func_name: MSELoss
      params:
        reduction: 'mean'
    cycle_loss:
      module_name: torch.nn
      func_name: L1Loss
      params:
        reduction: 'mean'
    identity_loss:
      module_name: torch.nn
      func_name: L1Loss
      params:
        reduction: 'mean'
    weights:
      gan_loss: 1
      cycle_loss: 10
      identity_loss: 2
    fake_pool_size: 30
  optimizer:
    generator:
      module_name: torch.optim
      func_name: Adam  # AdamW
      params:
        lr: 0.001
        #betas: [0.5, 0.999]
        #weight_decay: 0.0005
    discriminator:
      module_name: torch.optim
      func_name: Adam  # AdamW
      params:
        lr: 0.001
        #betas: [0.5, 0.999]
        #weight_decay: 0.0005
  scheduler:
    generator:
      module_name: torch.optim.lr_scheduler
      func_name: ExponentialLR
      params:
        gamma: 0.98
    discriminator:
      module_name: torch.optim.lr_scheduler
      func_name: ExponentialLR
      params:
        gamma: 0.98
trainer:
  verbose: True
  params:
    accelerator: "gpu"
    devices: 1
    precision: 16
    max_epochs: 2000
    detect_anomaly: True
  callbacks:
    # - module_name: pytorch_lightning.callbacks.early_stopping
    #   func_name: EarlyStopping
    #   params:
    #     monitor: 'val_loss_discriminator'
    #     patience: 50
    #     verbose: True
    #     min_delta: 0.00001
    - module_name: pytorch_lightning.callbacks.model_checkpoint
      func_name: ModelCheckpoint
      params:
        monitor: 'val_loss_discriminator'
        filename: '{epoch}-{val_loss:.5f}'
        save_top_k: 5
        save_last: True
        save_weights_only: True 
