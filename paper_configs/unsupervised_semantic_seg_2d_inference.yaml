mode: inference

data:
  inference_input:
    dir: "/PATH/TO/TEST/DATA/"  #ADD-YOURS
    reader_params:
      dimension_order_out: "YX"
      C: 0
      T: 0
      Z: 0
  inference_output:
    path: "/OUTPUT/PATH/"       #ADD-YOURS

  preprocess:
    - module_name: monai.transforms
      func_name: ScaleIntensityRangePercentiles       # Applying the same normalization as for IM in cyclegan_2d_train.yaml
      params:
        lower: 0.1
        upper: 99.9
        b_min: -1
        b_max: 1
    # - module_name: monai.transforms
    #   func_name: NormalizeIntensity
  postprocess:
    - module_name: mmv_im2im.postprocessing.basic_collection
      func_name: extract_segmentation
      params:
        channel: 0
        cutoff: 0.00000001
    # or
    # - module_name: mmv_im2im.postprocessing.basic_collection
    #   func_name: generate_classmap

model:
  framework: cyclegan
  net:
    generator:
      type: predefined_resnet
      params:
        spatial_dims: 2
        in_channels: 1
        out_channels: 1
        n_down_blocks: 4
        n_res_blocks: 9
        nf: 64
        norm_layer: "BATCH"
    discriminator:
      type: predefined_basic
      params:
        spatial_dims: 2
        in_channels: 1
        n_layers: 4
        nf: 64
        norm_layer: "INSTANCE"
  checkpoint: "/PATH/TO/LOGS/FOLDER/lightning_logs/version_0/checkpoints/best.ckpt"  #ADD-YOURS
  model_extra:
    inference_direction: "AtoB"   # IM => GT. For GT => IM set inference_direction: "BtoA"
    sliding_window_params:
      roi_size: [512, 512]   # you may simply use the value as in RandSpatialCropd in cyclegan_2d_train.yaml 
      sw_batch_size: 4
      overlap: 0.2
      mode: "gaussian"        
trainer:
  verbose: True
  params:
    gpus: 1
    precision: 16