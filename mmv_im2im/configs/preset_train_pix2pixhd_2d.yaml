mode: train

data:
  category: "pair"
  dataloader:
    train:
      dataloader_params:
        batch_size: 4
        pin_memory: True
        num_workers: 4

  preprocess:
    - module_name: monai.transforms
      func_name: LoadImaged
      params:
        keys: ["IM", "GT"]
        dimension_order_out: "YX"
        C: 0
        T: 0
        Z: 0
    - module_name: monai.transforms
      func_name: AddChanneld
      params:
        keys: ["IM", "GT"]
    - module_name: monai.transforms
      func_name: ScaleIntensityRangePercentilesd
      params:
        keys: ["IM"]
        lower: 0.5
        upper: 99.5
        b_min: -1
        b_max: 1
    - module_name: monai.transforms
      func_name: ScaleIntensityRangePercentilesd
      params:
        keys: ["GT"]
        lower: 0.1
        upper: 99.9
        b_min: -1
        b_max: 1
    - module_name: monai.transforms
      func_name: RandSpatialCropSamplesd
      params:
        keys: ["IM", "GT"]
        random_size: False
        num_samples: 4
        roi_size: [512, 512]
    - module_name: monai.transforms
      func_name: EnsureTyped
      params:
        keys: ["IM", "GT"]
  augmentation:
    - module_name: monai.transforms
      func_name: RandFlipd
      params:
        prob: 0.5
        keys: ["IM", "GT"]

model:
  framework: pix2pix
  net:
    generator:
      type: predefined_resnet
      params:
        spatial_dims: 2
        in_channels: 1
        out_channels: 1
        n_down_blocks: 4
        n_res_blocks: 9
        nf: 64
        norm_layer: "BATCH"
    discriminator:
      type: predefined_multiscale
      params:
        num_discriminator: 2
        spatial_dims: 2
        in_channels: 2
        n_layers: 4
        nf: 64
        norm_layer: "INSTANCE"
  criterion:
    loss_type: pix2pix_HD  # pix2pix_HD_original  |  pix2pix_basic
    gan_loss:
      module_name: torch.nn
      func_name: BCEWithLogitsLoss  # MSELoss
      params:
        reduction: 'mean'
    reconstruction_loss:
      module_name: torch.nn
      func_name: MSELoss
      params:
        reduction: 'mean'
    fm_loss:  # feature matching loss
      module_name: torch.nn
      func_name: L1Loss
      params:
        reduction: 'mean'
    weights:
      gan_loss: 1
      fm_loss: 10
      reconstruction_loss: 1000
  optimizer:
    generator:
      module_name: torch.optim
      func_name: Adam  # AdamW
      params:
        lr: 0.0002
        betas: [0.5, 0.999]
        weight_decay: 0.0005
    discriminator:
      module_name: torch.optim
      func_name: Adam  # AdamW
      params:
        lr: 0.0002
        betas: [0.5, 0.999]
        weight_decay: 0.0005
  scheduler:
    generator:
      module_name: torch.optim.lr_scheduler
      func_name: ExponentialLR
      params:
        gamma: 0.999
    discriminator:
      module_name: torch.optim.lr_scheduler
      func_name: ExponentialLR
      params:
        gamma: 0.999
trainer:
  verbose: True
  params:
    gpus: 1
    precision: 16
    max_epochs: 10000
    terminate_on_nan: True
